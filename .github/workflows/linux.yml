---
name: Linux

on:
  workflow_dispatch:
  push:
    paths:
      - Dockerfile
      - .github/workflows/linux.yml
  schedule:
    - cron: 45 23 * * *

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
permissions: write-all

jobs:
  filter:
    runs-on: ubuntu-latest
    outputs:
      remote_ref: ${{ steps.trigger-test.outputs.remote_ref }}
    steps:
      - uses: actions/checkout@main
      - name: set meta info
        run: |
          echo "remote_sha=$(git ls-remote ${{ secrets.DOTFILES_REPO }} HEAD | awk '{ print $1}')" >> "$GITHUB_ENV"

      - name: check if we need to trigger a test
        id: trigger-test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if ! gh api /repos/${{github.repository}}/branches/manifest-linux > /dev/null 2>&1; then
          echo "branch manifest not found. trigger a test"
          echo "remote_ref=master" >> "$GITHUB_OUTPUT"
          else
          last_sha=$(curl -sSLf https://raw.githubusercontent.com/${{github.repository}}/manifest-linux/manifest.json | jq -r '.remote_sha')
          if [ "$last_sha" != "${{ env.remote_sha }}" ]; then
          echo "remote_sha changed. trigger a test"
          echo "remote_ref=${{ env.remote_sha }}" >> "$GITHUB_OUTPUT"
          else
          echo "remote_sha not changed. skip"
          echo "remote_ref=skip" >> "$GITHUB_OUTPUT"
          fi
          fi

  build:
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.remote_ref != 'skip'
    strategy:
      fail-fast: false
      matrix:
        include:
          - {code_name: noble, test_arm64: false}
          - {code_name: jammy, test_arm64: false}
          - {code_name: focal, test_arm64: false}
          - {code_name: bionic, test_arm64: false}
          - {code_name: xenial, test_arm64: false}
          - {code_name: forky, test_arm64: false}
          - {code_name: trixie, test_arm64: false}
          - {code_name: bookworm, test_arm64: false}
          - {code_name: bullseye, test_arm64: false}
          - {code_name: buster, test_arm64: false}

    name: ${{ matrix.code_name }}
    steps:
      - uses: actions/checkout@main

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master

      - name: Login to GHCR
        uses: docker/login-action@master
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to ACR
        uses: docker/login-action@master
        with:
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PAT }}
          registry: ${{ secrets.ACR_REGISTRY }}

      - name: Set test platforms
        id: platforms
        run: |
          if [ "${{ matrix.test_arm64 }}" = "true" ]; then
          echo "test_platforms=linux/amd64,linux/arm64" >> "$GITHUB_ENV"
          else
          echo "test_platforms=linux/amd64" >> "$GITHUB_ENV"
          fi

      - name: test dotfiles
        timeout-minutes: 40
        uses: docker/build-push-action@master
        with:
          context: .
          file: Dockerfile
          platforms: ${{ env.test_platforms }}
          push: true
          provenance: false
          build-args: |
            IMAGE_NAME=ghcr.io/${{ github.repository }}
            CODE_NAME=${{ matrix.code_name }}
            REF=${{ needs.filter.outputs.remote_ref }}
          secrets: |
            "DOTFILES_REPO=${{ secrets.DOTFILES_REPO }}"
          tags: |
            ghcr.io/${{ github.repository }}:${{ matrix.code_name }}
            ${{ secrets.ACR_REGISTRY }}/${{ secrets.ACR_NAMESPACE }}/${{ secrets.ACR_IMAGE_NAME }}:${{ matrix.code_name }}

  manifest:
    runs-on: ubuntu-latest
    needs: build
    name: push manifest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@main

      - name: set meta info
        run: |
          echo "date=$(date +'%Y-%m-%d %H:%M:%S')" >> "$GITHUB_ENV"
          echo "remote_sha=$(git ls-remote ${{ secrets.DOTFILES_REPO }} HEAD | awk '{ print $1}')" >> "$GITHUB_ENV"

      - name: generate manifest
        run: |-
          mkdir public
          cat <<EOF > public/manifest.json
          {
          "os": "linux",
          "date": "${{ env.date }}",
          "remote_sha": "${{ env.remote_sha }}"
          }
          EOF
          cat public/manifest.json

      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: manifest-linux
          folder: ./public
          single-commit: true
          commit-message: ${{ github.event.head_commit.message }}
